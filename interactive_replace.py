#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.0a9; modified by padovaSR
#

import os
import re
import srt
from srt import Subtitle
from zamenaImena import new_dict 
from more_itertools import first_true
from itertools import tee, zip_longest, cycle
import logging.config

import wx


logger = logging.getLogger(__name__)


def getSubs(filein):
    """"""
    with open(filein, "r", encoding="utf-8") as f:
        return f.read()
    

class FindReplace(wx.Dialog):
    def __init__(self, parent, subtitles=[]):
        wx.Dialog.__init__(self, parent, style=wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER)
        
        self.subtitles = subtitles
        
        self.dname = r""
        
        self.SetSize((525, 400))
        self.SetTitle("Find-Replace")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(
            wx.Bitmap(
                os.path.join("resources", "icons", "system-run.png"), wx.BITMAP_TYPE_ANY
            )
        )
        self.SetIcon(_icon)
        
        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        label_1 = wx.StaticText(
            self, wx.ID_ANY, f"Replace from dictionary:  {self.dname}", style=wx.ALIGN_LEFT
        )
        label_1.SetFont(
            wx.Font(
                10,
                wx.FONTFAMILY_SWISS,
                wx.FONTSTYLE_NORMAL,
                wx.FONTWEIGHT_NORMAL,
                0,
                "Franklin Gothic Medium",
            )
        )
        sizer_1.Add(label_1, 0, wx.EXPAND | wx.LEFT | wx.TOP, 6)

        t_font = wx.Font(
                10,
                wx.FONTFAMILY_DEFAULT,
                wx.FONTSTYLE_NORMAL,
                wx.FONTWEIGHT_NORMAL,
                0,
                "Segoe UI",
            )

        self.text_1 = wx.TextCtrl(self, wx.ID_ANY, style=wx.TE_PROCESS_ENTER|wx.TE_MULTILINE|wx.TE_NO_VSCROLL|wx.TE_RICH)
        self.text_1.SetFont(t_font)
        sizer_1.Add(self.text_1, 0, wx.ALL | wx.EXPAND, 5)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        self.text_2 = wx.TextCtrl(self, wx.ID_ANY, style=wx.TE_PROCESS_ENTER|wx.TE_MULTILINE|wx.TE_RICH)
        self.text_2.SetFont(t_font)
        self.text_2.SetToolTip("Text modification is supported")
        self.text_2.SetFocus()
        sizer_2.Add(self.text_2, 1, wx.ALL | wx.EXPAND, 5)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(
            sizer_3, 0, wx.BOTTOM | wx.EXPAND | wx.RIGHT | wx.SHAPED | wx.TOP, 5
        )

        self.button_0 = wx.Button(self, wx.ID_ANY, "Find")
        self.button_0.SetMinSize((76, 25))
        sizer_3.Add(self.button_0, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 2)

        self.button_1 = wx.Button(self, wx.ID_REPLACE, "Accept")
        self.button_1.SetMinSize((76, 25))
        self.button_1.SetDefault()
        sizer_3.Add(self.button_1, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 2)

        self.button_2 = wx.Button(self, wx.ID_ANY, "Replace all")
        self.button_2.SetMinSize((76, 25))
        sizer_3.Add(self.button_2, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 2)

        self.button_3 = wx.Button(self, wx.ID_ANY, "Ignore")
        self.button_3.SetMinSize((76, 25))
        sizer_3.Add(self.button_3, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 2)

        self.button_4 = wx.Button(self, wx.ID_ANY, "Ignore all")
        self.button_4.SetMinSize((76, 25))
        sizer_3.Add(self.button_4, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 2)

        self.button_5 = wx.Button(self, wx.ID_CLOSE, "")
        self.button_5.SetMinSize((76, 25))
        sizer_3.Add(self.button_5, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 2)

        self.filePicker = wx.FilePickerCtrl(
            self,
            wx.ID_ANY,
            "",
            "Select a file",
            "Text File (*.txt)|*.txt|All Files (*.*)|*.*",
            wx.DefaultPosition,
            wx.DefaultSize,
            wx.FLP_DEFAULT_STYLE,
        )
        self.filePicker.SetInitialDirectory(os.path.join(os.getcwd(), "dicitionaries"))
        self.filePicker.SetToolTip(" \n Find dictionary \n ")
        self.filePicker.SetPath(os.path.abspath("dictionaries/Dictionary-1.txt"))
        self.dname = self.filePicker.GetPath()
        sizer_1.Add(self.filePicker, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 5)
        
        self.SetSizer(sizer_1)

        self.SetEscapeId(self.button_5.GetId())

        self.Layout()
        self.Centre()

        ############################################################################################

        self.IgnoreAll = []
        self.ReplaceAll = []
        self.Replace = []
        self.new_subs = []
        self.default_subs = list(srt.parse(getSubs("test.srt")))
        self.new_d = {}
        
        ## Events ##################################################################################
        self.filePicker.Bind(wx.EVT_FILEPICKER_CHANGED, self.FileChanged, self.filePicker)        
        self.Bind(wx.EVT_BUTTON, self.onShowText, self.button_0)
        self.Bind(wx.EVT_BUTTON, self.onReplace, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.onReplaceAll, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.onIgnore, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.onIgnoreAll, self.button_4)
        ############################################################################################
        
        self.wdict = new_dict(self.dname)
        self.subs = srt.parse(getSubs("test.srt"))
        self.wdict = self.clearDict(self.wdict, srt.compose(self.subs))
        self.getValues(self.subs)
        
        
    def getValues(self, iterator):
        """"""
        wdict = self.wdict
        r1 = re.compile(r"\b("+"|".join(map(re.escape, wdict.keys()))+r")\b")
        c = 0
        try:
            sub = next(self.subs)
            c += 1
        except StopIteration as e:
            wdict = self.clearDict(wdict, srt.compose(self.new_subs))
            logger.debug(f"Iter {e}")
        finally:
            p = "="*20
            self.text_2.SetValue(f"{p}\nEnd of subtitles reached!\n{p}")
        try:
            t1 = r1.findall(sub.content)
            t1 = list(set(t1))            
            newd = {}
            self.text_1.Clear()
            for i in range(len(t1)):
                self.text_1.AppendText(f"{t1[i]} ")
                v = wdict[t1[i]]
                newd[t1[i]] = v
            for k, v in newd.items():
                ctext = re.compile(r'\b'+k+r'\b')
                sub.content = ctext.sub(v, sub.content)
            self.text_2.SetValue(sub.content)
            for v in newd.values():
                for m in re.finditer(v, self.text_2.GetValue()):
                    self.text_2.SetStyle(m.start(), m.end(), wx.TextAttr("RED"))
            if t1:
                self.Replace.append(Subtitle(sub.index, sub.start, sub.end, sub.content))
                self.button_1.SetFocus()
                self.new_d = newd
            return c
        except Exception as e:
            logger.debug(f"Error: {e}")
            
    def FileChanged(self, event):
        """"""
        self.filePicker.SetPath(self.filePicker.GetPath())
        self.button_1.SetFocus()
        self.dname = self.filePicker.GetPath()
        wdict = new_dict(self.dname)
        self.subs = srt.parse(getSubs("test.srt"))
        self.wdict = self.clearDict(wdict, srt.compose(self.subs))
        self.subs = srt.parse(getSubs("test.srt"))
        self.onReplace(event)
        event.Skip()

    def onShowText(self, event):
        self.text_1.Clear()
        self.text_2.Clear()
        t = self.GetText()
        self.text_2.SetValue(srt.compose(t))
        event.Skip()
    
    def onReplace(self, event):
        text = self.text_2.GetValue()
        if self.Replace:
            sub = self.Replace[0]
            self.Replace.clear()
            self.new_subs.append(Subtitle(sub.index, sub.start, sub.end, text))
        while len(self.Replace) == 0:
            c = self.getValues(self.subs)
            if c == 0 or c is None:
                break
        event.Skip()

    def onReplaceAll(self, event):
        ''''''
        try:
            subs_d = srt.compose(self.default_subs)
            k = self.text_1.GetValue()
            
            ctext = re.compile(r"\b("+"|".join(map(re.escape,self.new_d.keys()))+r")\b")
            subs_d = ctext.sub(lambda x: self.new_d[x.group()], subs_d)
            
            self.default_subs = list(srt.parse(subs_d))
            for k in self.new_d.keys(): self.wdict.pop(k)
            self.onReplace(event)
        except Exception as e:
            logger.debug(f"Error: {e}")
        event.Skip()

    def onIgnore(self, event):
        print("Event handler 'onIgnore' not implemented!")
        event.Skip()

    def onIgnoreAll(self, event):
        print("Event handler 'onIgnoreAll' not implemented!")
        event.Skip()
    
    def clearDict(self, _dict, _subs):
        """"""
        new_dict = {}
        robj1 = re.compile(r"\b("+"|".join(map(re.escape, _dict.keys()))+r")\b")
        t_out1 = robj1.findall(_subs)
        for i in t_out1:
            for k, v in _dict.items():
                if i == k:
                    new_dict[i] = v
        self.subs = srt.parse(getSubs("test.srt"))
        print(new_dict)
        return new_dict
    
    def GetText(self):
        """"""
        for i in self.new_subs:
            for x in self.default_subs:
                if i.index == x.index:
                    t = self.default_subs.index(x)
                    self.default_subs[t] = i
        return self.default_subs
        


# end of class MyDialog


class MyApp(wx.App):
    def OnInit(self):
        self.dialog = FindReplace(None, wx.ID_ANY)
        self.SetTopWindow(self.dialog)
        self.dialog.ShowModal()
        self.dialog.Destroy()
        return True


# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
