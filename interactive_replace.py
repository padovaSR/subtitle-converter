#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.0a9; modified by padovaSR
#

import os

import wx


class FindReplace(wx.Dialog):
    def __init__(self, parent, *args,):
        wx.Dialog.__init__(self, parent, style=wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER)
        
        self.SetSize((524, 459))
        self.SetTitle("Find-Replace")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(
            wx.Bitmap(
                os.path.join("resources", "icons", "system-run.png"), wx.BITMAP_TYPE_ANY
            )
        )
        self.SetIcon(_icon)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        label_1 = wx.StaticText(
            self, wx.ID_ANY, "Replace from dictionary:", style=wx.ALIGN_LEFT
        )
        label_1.SetFont(
            wx.Font(
                10,
                wx.FONTFAMILY_SWISS,
                wx.FONTSTYLE_NORMAL,
                wx.FONTWEIGHT_NORMAL,
                0,
                "Franklin Gothic Medium",
            )
        )
        sizer_1.Add(label_1, 0, wx.EXPAND | wx.LEFT | wx.TOP, 6)

        self.text_1 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.text_1.SetFont(
            wx.Font(
                9,
                wx.FONTFAMILY_DEFAULT,
                wx.FONTSTYLE_NORMAL,
                wx.FONTWEIGHT_NORMAL,
                0,
                "Segoe UI",
            )
        )
        sizer_1.Add(self.text_1, 0, wx.ALL | wx.EXPAND, 5)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        self.text_2 = wx.TextCtrl(self, wx.ID_ANY, style=wx.TE_PROCESS_ENTER|wx.TE_MULTILINE)
        self.text_2.SetFont(
            wx.Font(
                9,
                wx.FONTFAMILY_DEFAULT,
                wx.FONTSTYLE_NORMAL,
                wx.FONTWEIGHT_NORMAL,
                0,
                "Segoe UI",
            )
        )
        self.text_2.SetToolTip("Change at will")
        self.text_2.SetFocus()
        sizer_2.Add(self.text_2, 1, wx.ALL | wx.EXPAND, 5)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(
            sizer_3, 0, wx.BOTTOM | wx.EXPAND | wx.RIGHT | wx.SHAPED | wx.TOP, 5
        )

        self.button_0 = wx.Button(self, wx.ID_ANY, "Start")
        self.button_0.SetMinSize((76, 25))
        sizer_3.Add(self.button_0, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 2)

        self.button_1 = wx.Button(self, wx.ID_REPLACE, "Replace")
        self.button_1.SetMinSize((76, 25))
        self.button_1.SetDefault()
        sizer_3.Add(self.button_1, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 2)

        self.button_2 = wx.Button(self, wx.ID_ANY, "Replace all")
        self.button_2.SetMinSize((76, 25))
        sizer_3.Add(self.button_2, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 2)

        self.button_3 = wx.Button(self, wx.ID_ANY, "Ignore")
        self.button_3.SetMinSize((76, 25))
        sizer_3.Add(self.button_3, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 2)

        self.button_4 = wx.Button(self, wx.ID_ANY, "Ignore all")
        self.button_4.SetMinSize((76, 25))
        sizer_3.Add(self.button_4, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 2)

        self.button_5 = wx.Button(self, wx.ID_CLOSE, "")
        self.button_5.SetMinSize((76, 25))
        sizer_3.Add(self.button_5, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 2)

        self.filePicker = wx.FilePickerCtrl(
            self,
            wx.ID_ANY,
            "",
            "Select a file",
            "Text File (*.txt)|*.txt|All Files (*.*)|*.*",
            wx.DefaultPosition,
            wx.DefaultSize,
            wx.FLP_DEFAULT_STYLE,
        )
        self.filePicker.SetInitialDirectory(os.path.join(os.getcwd(), "dicitionaries"))
        self.filePicker.SetToolTip(" \n Find dictionary \n ")
        self.filePicker.SetPath(os.path.abspath("dictionaries/Dictionary-1.txt"))
        sizer_1.Add(self.filePicker, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 5)

        self.SetSizer(sizer_1)

        self.SetEscapeId(self.button_5.GetId())

        self.Layout()
        self.Centre()

        self.filePicker.Bind(
            wx.EVT_FILEPICKER_CHANGED, self.FileChanged, self.filePicker
        )

        self.IgnoreAll = []
        self.ReplaceAll = []

        self.Bind(wx.EVT_BUTTON, self.onStart, self.button_0)
        self.Bind(wx.EVT_BUTTON, self.onReplace, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.onReplaceAll, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.onIgnore, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.onIgnoreAll, self.button_4)
        

    def FileChanged(self, event):
        """"""
        self.filePicker.SetPath(self.filePicker.GetPath())
        self.text_2.SetFocus()
        event.Skip()

    def onStart(self, event):
        
        event.Skip()
    
    def onReplace(self, event):
        path = self.filePicker.GetPath()
        with open(path, "r", encoding="utf-8") as f:
            for i in f:
                print(i)
        event.Skip()

    def onReplaceAll(self, event):
        print("Event handler 'onReplaceAll' not implemented!")
        event.Skip()

    def onIgnore(self, event):
        print("Event handler 'onIgnore' not implemented!")
        event.Skip()

    def onIgnoreAll(self, event):
        print("Event handler 'onIgnoreAll' not implemented!")
        event.Skip()
        


# end of class MyDialog


class MyApp(wx.App):
    def OnInit(self):
        self.dialog = FindReplace(None, wx.ID_ANY, "")
        self.SetTopWindow(self.dialog)
        self.dialog.ShowModal()
        self.dialog.Destroy()
        return True


# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
