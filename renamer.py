#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.1.0pre
# Modified by padovaSR

import os
from os.path import basename, join, dirname, split, splitext, normpath
import re
import shutil
import logging.config
import wx

logger = logging.getLogger(__name__)

EP = re.compile(r"epi(z|s)od(a|e)\s*-?\s*\W*\s*\d{,2}\.?|s\d{1,2}e\d{1,2}\.?|^\d{1,2}\.srt|\d{1,2}\s*x\s*\d{2}|s\d{1,2}\s*x\s*e\d{1,2}|\d{1,2}\.?\s?(ep)i?(z|s)?o?d?(a|e)?", (re.I|re.M))
RP = re.compile(r"\d{4}\w?\.?|(x|h)\.?26(4|5)|N(10|265)|ddp5\.1\.?|\b\w{2,}\b(?<!\d)|[ \.-]|(ION\d{2,3})|(?<=part[.\- ])\d+|s\d\d?e", re.I)
l_subs = []
renamed = []

def listFiles(folderIn, ext):
    """"""
    subs_list = []
    vids_list = []
    l_subs.clear()
    with os.scandir(folderIn) as it:
        for entry in it:
            if not entry.name.startswith('.') and entry.is_file():
                if entry.name.lower().endswith(ext):
                    subs_list.append(entry.name)
                    l_subs.append(entry.name)
                if entry.name.lower().endswith((".mp4", ".mkv", ".avi")):
                    vids_list.append(entry.name)
        if not vids_list or not subs_list:
            dlg = wx.RichMessageDialog(
                    None,
                    "Missing File\n\nUnable to find video or *srt files.\nFile required as reference.",
                    "Renamer",
                    style=wx.OK,
            )
            if dlg.ShowModal() == wx.ID_OK:
                dlg.Destroy()            
    return subs_list, vids_list    

def reorderFiles(folderIn, subs=[], vids=[]):
    """"""
    new_subs_list = []
    new_vids_list = []
    try:
        if len(subs) > 1 and len(vids) > 1:
            for subtitle,video in zip(subs, vids):
                a = int(re.match(r"\d{1,2}", RP.sub("", EP.search(subtitle).group(0))).group(0))
                b = int(re.match(r"\d{1,2}", RP.sub("", EP.search(video).group(0))).group(0))
                a = max(0, a - 1)
                b = max(0, b - 1)
            
                # Extend the lists if necessary
                while len(new_subs_list) <= a:
                    new_subs_list.append(None)
                while len(new_vids_list) <= b:
                    new_vids_list.append(None)
                
                # Insert elements into new lists
                new_subs_list[a] = subtitle
                new_vids_list[b] = video
                l_subs[a] = normpath(join(folderIn, subtitle))
            # Remove trailing None elements
            new_subs_list = [x for x in new_subs_list if x is not None]
            new_vids_list = [x for x in new_vids_list if x is not None]
        else:
            new_subs_list = subs
            new_vids_list = vids
            l_subs.append(normpath(join(folderIn, subs[0])))        
    except Exception as e:
        logger.debug(f"reorderFiles: {e}")
    return new_subs_list, new_vids_list
    
class FilesRename(wx.Dialog):
    def __init__(self, parent, id=wx.ID_ANY):
        wx.Dialog.__init__(
            self,
            parent,
            style=wx.DEFAULT_DIALOG_STYLE
            | wx.MAXIMIZE_BOX
            | wx.MINIMIZE_BOX
            | wx.RESIZE_BORDER,
        )
        self.SetSize((695, 604))
        self.SetTitle("Rename Utility")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(
            wx.Bitmap(join("resources","icons","icon_d.png"), wx.BITMAP_TYPE_ANY)
        )
        self.SetIcon(_icon)
        self.SetFocus()

        self.sizer_1 = wx.BoxSizer(wx.VERTICAL)
        self.textFont = wx.Font(10,
            wx.FONTFAMILY_SWISS,
            wx.FONTSTYLE_NORMAL,
            wx.FONTWEIGHT_NORMAL, 0,
            "Franklin Gothic Medium",
        )

        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)

        self.sizer_2 = wx.BoxSizer(wx.VERTICAL)

        self.label_1 = wx.StaticText(
            self.panel_1, wx.ID_ANY, "Izaberi folder", style=wx.ALIGN_LEFT
        )
        self.label_1.SetFont(
            wx.Font(9,
                wx.FONTFAMILY_SWISS,
                wx.FONTSTYLE_NORMAL,
                wx.FONTWEIGHT_NORMAL, 0,
                "Franklin Gothic Medium",
            )
        )
        self.sizer_2.Add(self.label_1, 0, wx.EXPAND | wx.LEFT | wx.TOP, 3)
        
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_2.Add(sizer_5, 0, wx.EXPAND, 0)
        
        self.dirPicker1 = wx.DirPickerCtrl(
            self.panel_1,
            wx.ID_ANY,
            wx.EmptyString,
            "Select a folder",
            wx.DefaultPosition,
            wx.DefaultSize,
            wx.DIRP_DEFAULT_STYLE | wx.DIRP_USE_TEXTCTRL,
        )
        self.dirPicker1.SetFocus()
        sizer_5.Add(self.dirPicker1, 1, wx.ALL|wx.EXPAND, 4)
        
        self.bm_button_1 = wx.BitmapButton(
            self.panel_1,
            wx.ID_ANY,
            wx.Bitmap(join("resources","icons","reload.png"), wx.BITMAP_TYPE_ANY),
        )
        # self.bm_button_1.SetMinSize((24, 24))
        self.bm_button_1.SetToolTip("Reload folder")
        self.bm_button_1.Enable(False)
        sizer_5.Add(
            self.bm_button_1, 0,
            wx.ALIGN_CENTER_VERTICAL | wx.RIGHT | wx.TOP | wx.BOTTOM, 3, 
        )

        self.window_1 = wx.SplitterWindow(
            self.panel_1, wx.ID_ANY, style=wx.SP_3D | wx.SP_LIVE_UPDATE
        )
        self.window_1.SetMinimumPaneSize(50)
        self.window_1.SetSashGravity(0.5)
        self.sizer_2.Add(self.window_1, 1, wx.ALL | wx.EXPAND, 4)
        
        self.text_1 = wx.TextCtrl(
            self.window_1,
            wx.ID_ANY, "",
            style=wx.TE_DONTWRAP | wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_RICH,
        )
        self.text_1.SetFont(self.textFont)
        self.text_1.SetToolTip("Originalni\nfajlovi")

        self.text_2 = wx.TextCtrl(
            self.window_1,
            wx.ID_ANY, "",
            style=wx.TE_DONTWRAP | wx.TE_MULTILINE | wx.TE_RICH,
        )
        self.text_2.SetFont(self.textFont)
        self.text_2.SetToolTip("Preimenovani\nfajlovi")
        self.text_2.SetFocus()

        self.sizer_3 = wx.StdDialogButtonSizer()
        self.sizer_1.Add(self.sizer_3, 0, wx.BOTTOM | wx.EXPAND | wx.RIGHT, 4)
        
        self.sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_3.Add(self.sizer_4, 1, wx.EXPAND, 0)
    
        self.cb_1 = wx.CheckBox(self, wx.ID_ANY, "*.srt")
        self.cb_1.SetValue(1)
        self.sizer_4.Add(self.cb_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        
        self.cb_2 = wx.CheckBox(self, wx.ID_ANY, "*.sub")
        self.sizer_4.Add(self.cb_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)

        self.cb_3 = wx.CheckBox(self, wx.ID_ANY, "*.txt")
        self.sizer_4.Add(self.cb_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        self.sizer_3.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        self.sizer_3.AddButton(self.button_CANCEL)

        self.sizer_3.Realize()

        self.window_1.SplitHorizontally(self.text_1, self.text_2)

        self.panel_1.SetSizer(self.sizer_2)

        self.SetSizer(self.sizer_1)

        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()
        
        self.suffix = ".srt"
        self.vid_suffix = ".mkv"
        self.subtitles = l_subs
        
        self.button_CANCEL.Bind(wx.EVT_BUTTON, self.onCancel)
        self.button_OK.Bind(wx.EVT_BUTTON, self.renameFiles)
        self.dirPicker1.Bind(wx.EVT_DIRPICKER_CHANGED, self.getNames)
        self.Bind(wx.EVT_CHECKBOX, self.onCheckBox)
        self.Bind(wx.EVT_BUTTON, self.onReload, self.bm_button_1)

    def getNames(self, event):
        self.text_1.Clear()
        self.text_2.Clear()
        sourcePath = self.dirPicker1.GetPath()
        try:
            title_list,video_list = listFiles(sourcePath, self.suffix)
            new_subs_list,new_vids_list = reorderFiles(sourcePath, title_list, video_list)
            self.vid_suffix = splitext(video_list[0])[1]
            renamed_subs_list = [splitext(filename)[0] + ".srt" for filename in new_vids_list]
        
            for title_name in new_subs_list:
                self.text_1.AppendText(f"{title_name}\n")
            for file_name in renamed_subs_list:
                self.text_2.AppendText(f"{file_name}\n")
        except Exception as e:
            logger.debug(f"getNames: {e}")        
        self.bm_button_1.Enable(True)
        event.Skip()

    def renameFiles(self, event):
        ''''''
        renamed.clear()
        n = self.text_2.GetNumberOfLines()
        if n > 2:
            pl_name = f"{split(dirname(self.subtitles[0]))[1]}.m3u"
            pl_file = join(dirname(self.subtitles[0]), pl_name)
            with open(pl_file, "w", encoding="utf-8") as f:
                f.write(f"#{basename(pl_file)[:-4]} Playlist\n")            
        for i in range(0, n):
            try:
                line = self.text_2.GetLineText(i)
                new_name = join(os.path.dirname(self.subtitles[i]), line)
                shutil.move(self.subtitles[i], new_name)
                renamed.append(f"{line}\n")
                if n > 2:
                    with open(pl_file, "a", encoding="utf-8") as f:
                        f.write(f"{splitext(line)[0]}{self.vid_suffix}\n")                
                logger.debug(f"{basename(self.subtitles[i])} -> {line}")
            except Exception as e:
                logger.debug(f"{e}")
        self.subtitles.clear()
        event.Skip()
        
    def onCheckBox(self, event):
        cb = event.GetEventObject()
        for i in [self.cb_1, self.cb_2, self.cb_3]: i.SetValue(0)
        cb.SetValue(1)
        
        if self.dirPicker1.GetPath():
            self.suffix = cb.GetLabel().strip("*")
            self.getNames(event)
        else:
            logger.debug("No selected directory")
        event.Skip()        
        
    def onReload(self, event):
        self.getNames(event)
        self.text_2.SetFocus()
        event.Skip()    
    
    def RenamedSubs(self):
        """"""
        return renamed
        
    def onCancel(self, event):
        """"""
        self.Destroy()
        

class MyApp(wx.App):
    def OnInit(self):
        self.dialog = FilesRename(None, wx.ID_ANY)
        self.SetTopWindow(self.dialog)
        self.dialog.ShowModal()
        # self.dialog.Destroy()
        return True

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
